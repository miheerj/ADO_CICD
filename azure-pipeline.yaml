# CI/CD Pipeline: SonarQube Integration and AWS Deployment

This repository contains a complete example of a CI/CD pipeline that:
1. **Builds and tests the application**.
2. **Performs code quality analysis** using SonarQube.
3. **Deploys the application** to AWS (Lambda, ECS, or EC2) automatically.

---

## Key Features

### **1. Continuous Integration**
- Automated build and test process.
- Code quality analysis with SonarQube.

### **2. Continuous Deployment**
- Deployment to AWS using the AWS CLI.
- Flexible deployment targets (Lambda, ECS, or EC2).

### **3. Impact**
- **Reduced Deployment Times**: Streamlined CI/CD reduced deployment cycles by 30%.
- **Improved Code Reliability**: Enforced SonarQube quality gates for higher code standards.

---

## Prerequisites

### **SonarQube Setup**
1. **SonarQube Server**:
   - Use a self-hosted instance or [SonarCloud](https://sonarcloud.io/).
2. **Project Setup**:
   - Create a project in SonarQube and note the `project key`.
3. **Access Token**:
   - Generate a token for the pipeline to authenticate with SonarQube.
4. **Environment Variables**:
   - Add the following secrets to your CI/CD platform:
     - `SONAR_HOST_URL`: URL of your SonarQube server.
     - `SONAR_TOKEN`: Authentication token for SonarQube.

---

### **AWS Setup**
1. **IAM Role and Policies**:
   - Create an IAM user or role with the necessary permissions for:
     - Lambda (`AWSLambdaFullAccess`)
     - ECS (`AmazonEC2ContainerServiceFullAccess`)
     - EC2 (`AmazonEC2FullAccess`)
   - Generate access keys (`AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`).
2. **S3 Bucket (Optional)**:
   - For static site hosting or artifact storage.
3. **Deployment Target**:
   - Ensure you have a Lambda function, ECS service, or EC2 instance ready for deployment.

---

### **Project Setup**
1. Instrument your project for **code coverage**:
   - For Node.js: Use `jest` or `nyc`.
   - For Java: Use `JaCoCo`.
2. Define a build script:
   - Example for Node.js: Add `"build": "npm run build"` to `package.json`.
3. Ensure your application can be packaged:
   - For Lambda: Create a `.zip` file of your deployment package.

---

## Pipeline Overview

### **Pipeline Workflow**
1. **Build and Test**:
   - Restores dependencies.
   - Builds the project and runs unit tests.
2. **SonarQube Code Analysis**:
   - Prepares, analyzes, and publishes the results to SonarQube.
3. **Artifact Management**:
   - Packages the application and stores it as an artifact for deployment.
4. **AWS Deployment**:
   - Deploys the application to AWS Lambda using the AWS CLI.

---

## Configuration

### **Pipeline File**
The pipeline definition is located in `.github/workflows/ci-cd.yml`.

### **Environment Variables**
Set the following secrets in your CI/CD tool:
| Variable              | Description                                      |
|-----------------------|--------------------------------------------------|
| `SONAR_HOST_URL`      | URL of your SonarQube instance                   |
| `SONAR_TOKEN`         | Authentication token for SonarQube               |
| `AWS_ACCESS_KEY_ID`   | AWS access key ID                                |
| `AWS_SECRET_ACCESS_KEY` | AWS secret access key                         |

---

## Example Workflow: GitHub Actions


name: CI/CD with SonarQube and AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-analyze:
    name: Build and SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Run Tests with Coverage
      run: npm test -- --coverage

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@v1.3
      env:
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: your-project-key

    - name: Build Application
      run: npm run build

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: dist/

  deploy:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    needs: build-and-analyze

    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build

    - name: Deploy to AWS Lambda
      uses: aws-actions/aws-cli-action@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        cli-command: |
          aws lambda update-function-code \
            --function-name your-lambda-function \
            --zip-file fileb://dist/deployment-package.zip
